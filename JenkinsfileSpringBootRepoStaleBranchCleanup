#!/* groovylint-disable CompileStatic, LineLength, NestedBlockDepth, NoDef, UnusedVariable, VariableName, VariableTypeRequired */
//@Library('pipeline-library') _

//import defra.pipeline.config.Config
//import defra.pipeline.deploy.DeployQueries
//def jenkinsCredentialsRepository = Config.getPropertyValue("jenkinsCredentialsRepository", this)

pipeline {
    agent {label 'autoNodeLive'}
    //triggers {
       //cron('TZ=Europe/London\n0 21 * * 4')
    //}
    parameters {
        string(name: 'repository', defaultValue: 'giteux.azure.defra.cloud/imports/spring-boot-parent.git')
        string(name: 'ignoredBranchesRegex', defaultValue: '^\\s*origin\\/(master|stale|HEAD).*', description: 'Branches not to cleanup')
        string(name: 'inactivityDays', defaultValue: '14', description: 'Number of days without a commit before becomming stale')
        }
    options {
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage('Cleanup Spring-Boot-Parent Repo Git Branches') {
            steps {
                script {
                    for (stalebranch in  params.repository) {
                        withCredentials([string(credentialsId: 'JENKINS_GITLAB_TOKEN', variable: 'TOKEN')]) {
                            staleBranchesList = []
                            branchRenamePrefix = 'stale/'
                            repoUrl =  "https://jenkins:${TOKEN}@giteux.azure.defra.cloud/imports/spring-boot-parent.git"

                            // Clone Directories
                            sh "git clone ${repoUrl}"

                            dir("${stalebranch}") {
                                branchesList = sh(
                                    script: """
                                        git branch -r | grep -ivE '${ignoredBranchesRegex}' | sed /\\*/d
                                    """, returnStdout: true).split() as List

                                for (branch in branchesList) {
                                    branchStatus = sh(
                                        script: """
                                            set +x
                                            echo "Checking branch ${branch}"
                                            if [ -z \"\$(git log -1 --since='${inactivityDays} days' -s ${branch})\" ]; then
                                                echo "${branch} is stale! Last commit: \$(git log -1 --format=%cd -s -s ${branch})."
                                                exit 0
                                            else
                                                exit 1
                                            fi
                                            """, returnStatus: true)

                                    if (branchStatus == 0) {
                                        staleBranchesList.add(branch)
                                    }
                                }

                                if (staleBranchesList.isEmpty()) {
                                    echo "No stale branches detected."
                                } else {
                                    for (branch in staleBranchesList) {
                                        sh """
                                            set +x
                                            BRANCH_NAME="\$(echo ${branch} | sed -e 's/origin\\///')"
                                            NEW_BRANCH_NAME="${branchRenamePrefix}\${BRANCH_NAME}"
                                            echo "Renaming branch \${BRANCH_NAME} to \${NEW_BRANCH_NAME}"
                                            git branch \${NEW_BRANCH_NAME} ${branch}
                                            git push -f ${repoUrl} --set-upstream \${NEW_BRANCH_NAME}
                                            echo "Branch \${NEW_BRANCH_NAME} created. Removing \${BRANCH_NAME}."
                                            git push ${repoUrl} --delete \${BRANCH_NAME}
                                        """
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            step([$class: 'WsCleanup'])
        }
    }
}
